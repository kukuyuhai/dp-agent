version: '3.8'

services:
  db:
    image: postgres:15
    container_name: dp-postgres
    restart: always
    environment:
      POSTGRES_DB: dp_agent
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dp-network

  minio:
    image: minio/minio:latest
    container_name: dp-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - dp-network

  backend:
    build: ./backend
    container_name: dp-backend
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/dp_agent
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dp-network

  frontend:
    build: ./frontend
    container_name: dp-frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
    networks:
      - dp-network

volumes:
  postgres_data:
  minio_data:

networks:
  dp-network:
    driver: bridge
